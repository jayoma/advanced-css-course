/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/*
 * basic reset
 */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  /*
   * the following are inherited by all descendant elements (unless overridden)
   */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;

  /*
   * the following are NOT inherited by descendant elements
   */
  padding: 30px;
}

.header {
  height: 95vh;
  /*
   * we can stack multiple background images
   */
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  /*
   * cover = Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains.
   */
  background-size: cover;
  background-position: top;
  /*
   * learn more about clip-path:
   * https://bennettfeely.com/clippy/
   */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*
   * make this element the origin/reference from which any absolutely-positioned descendant elements are based
   */
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  /*
   * super easy, non-flexbox way to center-center an element (note that it will be relative to the first 'relative' parent)
   */
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  /*
   * 'block' simply means the element is going to occupy 100% of the available width (transform any inline element to a block element)
   */
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /* animation-delay: 3s;
  animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  /*
   * shorthand notation
   */
  animation: moveInRight 1s ease-out;
}

/*
 * simple animation examples: the browser is optimized for the opacity and transform properties; should only use these for animations.
 */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/*
 * pseudo classes represent a state of an element
 */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/*
 * this is the state when an element is clicked
 */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/*
 * pseudo elements allow us to style certain parts of elements
 * i.e. the ':after' pseudo element adds a virtual element right after the element we're selecting, and we can then style that virtual element
 */
.btn::after {
  content: '';
  display: inline-block;
  /*
   * this pseudo element is considered to be a child of the '.btn' element, so these height/width properties are relative to the '.btn' element.
   */
  height: 100%;
  width: 100%;
  border-radius: 100px;
  /*
   * this stacks the pseudo element behind the '.btn' element
   */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /*
   * always put the transition property on the initial state
   */
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  /*
   * automatically apply the styles of the zero-percent state - immediately upon page load - and before the animation starts
   */
  animation-fill-mode: backwards;
}
